---
name: Publish docker image

on:
  workflow_run:
    workflows: ['CI']
    branches: [master]
    types:
      - completed

permissions:
  contents: read
  packages: write

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMG_NAME: geoblocks/ngv-ui
  DOCKER_TAG: latest

jobs:
  # As the `env` context cannot be used in a `with` workflow key, we do this dummy job to get it:
  setup_env_vars:
    runs-on: ubuntu-latest
    steps:
      - run: echo ""
    outputs:
      image_tag: ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_IMG_NAME}}:${{env.DOCKER_TAG}}
      docker_registry: ${{env.DOCKER_REGISTRY}}

  build_and_publish:
    name: Build and publish
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ needs.setup_env_vars.outputs.docker_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push ngv
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ needs.setup_env_vars.outputs.image_tag }}
      - name: Update images sha
        id: get_image_sha
        run: echo "img_sha=$(docker inspect --format='{{index .RepoDigests 0}}' '${DOCKER_REGISTRY}/${DOCKER_IMG_NAME}:${DOCKER_TAG}' | cut -d':' -f2)" >> $GITHUB_OUTPUT;
    outputs:
      image_sha: ${{ steps.get_image_sha.outputs.img_sha }}

  trigger_deploy:
    name: Trigger deploy on lab
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: build_and_publish
    steps:
      - name: Deploy Stage
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_DEPLOY }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'camptocamp',
              repo: 'argocd-gs-plg-apps',
              workflow_id: 'update-ngv-image.yaml',
              ref: 'main'
              inputs: {
                img_sha: ${{ needs.build_and_publish.outputs.img_sha }}
              }
            });
